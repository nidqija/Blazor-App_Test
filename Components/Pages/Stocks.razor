@page "/stocks"
@using System
@using System.Collections.Generic
@using System.Net
@using System.Text.Json
@inject IHttpClientFactory ClientFactory




<h3>Stocks Index Viewer</h3>
<h3>Company Name : IBM</h3>
@if (loading)
{
    <p><em>Loading data...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (ibmData.Count == 0)
{
    <p>No data available.</p>
}
else
{
<table class="table table-striped table-bordered">
	<thead class="table-dark">
		<tr>
			<th>Timestamp</th>
			<th>Open</th>
			<th>High</th>
			<th>Low</th>
			<th>Close</th>
			<th>Volume</th>
		</tr>
	</thead>
	<tbody>

		@foreach (var item in ibmData)
		{
			<tr>
				<td>@item.Timestamp</td>
				<td>@item.Open</td>
				<td>@item.High</td>
				<td>@item.Low</td>
				<td>@item.Close</td>
				<td>@item.Volume</td>
			</tr>
		}
	</tbody>
</table>
}


@code {
	private List<IbmStock> ibmData = new();
	private bool loading = true;
	private string? errorMessage;
	private string apiKey = "demo";
	private HttpClient Http => ClientFactory.CreateClient("AlphaVantage");

	protected override async Task OnInitializedAsync()
	{
		await loadIBMData();
	}


	private string keyString = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";
	private async Task loadIBMData()
	{
		try
		{
			loading = true;
			errorMessage = null;
			var url = $"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";
			var response = await Http.GetFromJsonAsync<Dictionary<string , JsonElement>>(url);

			if (response != null && response.ContainsKey("Time Series (5min)"))
			{
				var raw = response["Time Series (5min)"].ToString();

				if(raw != null)
				{
					var TimeSeries = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, Dictionary<string ,string>>>(response["Time Series (5min)"]?.ToString()?? "");
					foreach (var item in TimeSeries!)
					{
						ibmData.Add(new IbmStock
						{
                           Timestamp = item.Key,

						   Open = item.Value["1.open"],
						   High = item.Value["2.high"],
                           Low = item.Value["3. low"],
						   Close = item.Value["4. close"],
						   Volume = item.Value["5. volume"]



						});
					}

					ibmData = ibmData.OrderByDescending(x => x.Timestamp).ToList();

				}
			}

			else
			{
				errorMessage = "No intraday data found for IBM.";

			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error fetching data : {ex.Message}";
		}


		finally
		{
			loading = false;
		}

	}




	public class IbmStock
	{
		public string Timestamp { get; set; } = string.Empty;
		public string Open { get; set; } = string.Empty;
		public string High { get; set; } = string.Empty;
		public string Low { get; set; } = string.Empty;
		public string Close { get; set; } = string.Empty;
		public string Volume { get; set; } = string.Empty;


	}
}
